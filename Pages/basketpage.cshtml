@page "/basketpage"

@model BasketPage

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>корзина</title>
    <link rel="stylesheet" href="~/basket/style.css">
</head>
<body>
    <header>
        <div class="shop-name grid">
            <img class="logo" src="~/Images/Common/logotip.png" alt="">
            <img class="shop-title" src="~/Images/Common/nazvanie.png" alt="">
        </div>
        <div class="refs grid">
            <div class="locate">
                <img src="" alt="">
                <span class="loc-name"></span>
            </div>
            <a class="login" href="/loginpage">
                <img src="~/Images/Common/user.png" alt="">
            </a>
            <a href="/mainpage">
                <img src="~/Images/Common/edithome.png" alt="">
            </a>
        </div>
    </header>
    <div class="padding">
    </div>
    <div class="title">
        корзина
    </div>
    <section class="s-first">
        <div class="product-list">
            @foreach (var m in Model.Models)
            {
                Product product = Model.productRepository.GetProductById(m.ProdId);

                <div class="product">
                    <div class="prod-container">
                        <div class="pre-img">
                            <img src="@product.ImagePath" alt="">
                        </div>
                        <div class="adding">
                            <form asp-page="/basketpage">
                                <input type="hidden" value="@product.Id" asp-for="ProdIdForMinus" />
                                <button type="submit"><img src="~/Images/Common/minus.png" alt=""></button>
                            </form>
                            <span class="count">@m.Count</span>
                            <form asp-page="/basketpage">
                                <input type="hidden" value="@product.Id" asp-for="ProdIdForPlus" />
                                <button type="submit"><img src="~/Images/Common/plus.png" alt=""></button>
                            </form>
                        </div>
                    </div>
                    <div class="description">
                        <div class="name">
                            @product.ProductName
                        </div>
                        <div class="cost">
                            <span>@(product.Price*m.Count)</span>
                            <img src="~/Images/Common/ruble.png" alt="">
                        </div>
                    </div>
                </div>
            }
        </div>
        <div class="order-pannel">
            <div class="summary">
                <span>
                    ИТОГ
                </span>
                <div class="sum">
                    <span>
                        @Model.TotalPrice
                    </span>
                    <img src="~/Images/Common/ruble.png" alt="">
                </div>
            </div>
            <form asp-page="basketpage" method="post">
                <input type="hidden" value="true" asp-for="IsOrder"/>
                <button>заказать</button>
            </form>
        </div>
    </section>
    <script src="~/basket/script.js"></script>
</body>
</html>

@functions{
    public class BasketPage : PageModel
    {
        public IProductRepository productRepository;

        private ICustomerRepository customerRepository;

        private IBasketRepository basketRepository;

        private DataContext dataContext;

        public BasketPage(DataContext dataContext, IProductRepository productRepository, ICustomerRepository customerRepository, IBasketRepository basketRepository)
        {
            this.dataContext = dataContext;

            this.productRepository = productRepository;

            this.customerRepository = customerRepository;

            this.basketRepository = basketRepository;
        }

        public Customer Current { get; set; }

        public List<BusketModel> Models { get; set; } = new List<BusketModel>();

        public int TotalPrice { get; set; }

        [BindProperty]
        public int ProdIdForPlus { get; set; } = 0;

        [BindProperty]
        public int ProdIdForMinus { get; set; } = 0;

        [BindProperty]
        public bool IsOrder { get; set; } = false;

        public IActionResult OnGet()
        {
            if (User.Identity.IsAuthenticated)
            {
                string name = User.Identity.Name;

                string email = User.FindFirst(ClaimTypes.Email)?.Value;

                Current = customerRepository.GetCustomerByNameAndEmail(name, email);

                Busket busket = dataContext.Buskets.Include(b => b.BusketModels).First(b => b.CustomerId == Current.Id);

                foreach (var b in busket.BusketModels)
                {
                    TotalPrice += b.Count * productRepository.GetProductById(b.ProdId).Price;

                    b.Busket = null;

                    Models.Add(b);
                }

                return Page();
            }

            return Page();

        }

        public IActionResult OnPost()
        {
            if (User.Identity.IsAuthenticated)
            {
                string name = User.Identity.Name;

                string email = User.FindFirst(ClaimTypes.Email)?.Value;

                Current = customerRepository.GetCustomerByNameAndEmail(name, email);

                if (IsOrder)
                {
                    basketRepository.CreateOrder(Current.Id);

                    return Redirect("/mainpage");
                }

                if (ProdIdForMinus != 0)
                {
                    if (Current.Busket.BusketModels.First(p => p.ProdId == ProdIdForMinus).Count > 1)
                    {
                        basketRepository.AddProductToBasket(new BusketModel() { ProdId = ProdIdForMinus }, Current.Id, false);

                        return Redirect("/basketpage");
                    }
                    else
                    {
                        basketRepository.DeleteProductFromBasket(ProdIdForMinus, Current.Id);
                    }
                }

                if (ProdIdForPlus != 0)
                {
                    basketRepository.AddProductToBasket(new BusketModel() { ProdId = ProdIdForPlus }, Current.Id, true);

                    return Redirect("/basketpage");
                }

                return Redirect("/basketpage");
            }

            return Page();
        }
    }
}
